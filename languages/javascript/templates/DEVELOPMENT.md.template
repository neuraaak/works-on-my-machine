# üü® Guide de D√©veloppement - {{PROJECT_NAME}}

> Guide complet pour contribuer au projet **{{PROJECT_NAME}}**

## üöÄ Installation et Configuration

### Pr√©requis
- **Node.js** >= 18.0.0
- **npm** >= 9.0.0 (ou **yarn**, **pnpm**)
- **Git** pour la gestion de versions

### Installation
```bash
# Cloner le projet
git clone <repository-url>
cd {{PROJECT_NAME}}

# Installer les d√©pendances
npm install

# Installer les hooks pre-commit
npm run prepare
```

## üõ†Ô∏è Environnement de D√©veloppement

### Scripts Disponibles
```bash
# D√©veloppement
npm run dev              # Serveur de d√©veloppement
npm run build            # Build de production
npm run start            # Serveur de production

# Qualit√© du code
npm run lint             # V√©rification ESLint
npm run lint:fix         # Correction automatique ESLint
npm run format           # Formatage Prettier
npm run format:check     # V√©rification formatage

# Tests
npm test                 # Tests Jest
npm run test:watch       # Tests en mode watch
npm run test:coverage    # Tests avec couverture
```

### Structure du Projet
```
{{PROJECT_NAME}}/
‚îú‚îÄ‚îÄ src/                 # Code source principal
‚îÇ   ‚îú‚îÄ‚îÄ components/      # Composants r√©utilisables
‚îÇ   ‚îú‚îÄ‚îÄ pages/          # Pages/Vues principales
‚îÇ   ‚îú‚îÄ‚îÄ utils/          # Utilitaires et helpers
‚îÇ   ‚îú‚îÄ‚îÄ hooks/          # Hooks personnalis√©s (React)
‚îÇ   ‚îú‚îÄ‚îÄ services/       # Services API
‚îÇ   ‚îî‚îÄ‚îÄ styles/         # Styles globaux
‚îú‚îÄ‚îÄ tests/              # Tests unitaires et d'int√©gration
‚îú‚îÄ‚îÄ public/             # Assets statiques
‚îú‚îÄ‚îÄ docs/               # Documentation
‚îî‚îÄ‚îÄ config/             # Configuration build/dev
```

## üìã Standards de Code

### ESLint
- **R√®gles** : Standard + TypeScript + React/Vue
- **Extensions** : S√©curit√©, bonnes pratiques
- **Auto-fix** activ√© pour les erreurs corrigeables

### Prettier
- **Print Width** : 80 caract√®res
- **Quotes** : Simple quotes
- **Semicolons** : Activ√©s
- **Tab Width** : 2 espaces

### TypeScript (si applicable)
- **Strict mode** activ√©
- **Types explicites** pour les APIs publiques
- **Interfaces** pr√©f√©r√©es aux types pour les objets

## üß™ Tests

### Structure des Tests
```
tests/
‚îú‚îÄ‚îÄ unit/               # Tests unitaires
‚îú‚îÄ‚îÄ integration/        # Tests d'int√©gration
‚îú‚îÄ‚îÄ e2e/               # Tests end-to-end (si applicable)
‚îî‚îÄ‚îÄ __mocks__/         # Mocks globaux
```

### Conventions de Nommage
- **Fichiers de test** : `*.test.js/ts` ou `*.spec.js/ts`
- **Dossiers** : M√™me structure que `src/`
- **Mocks** : `__mocks__/nom-du-module.js`

### Types de Tests
```javascript
// Test unitaire
describe('UtilityFunction', () => {
  it('should return expected result', () => {
    expect(utilityFunction(input)).toBe(expectedOutput);
  });
});

// Test de composant (React)
import { render, screen } from '@testing-library/react';
describe('MyComponent', () => {
  it('renders correctly', () => {
    render(<MyComponent />);
    expect(screen.getByText('Expected Text')).toBeInTheDocument();
  });
});
```

## üîÑ Workflow Git

### Branches
- **main** : Code de production
- **develop** : Int√©gration des features
- **feature/nom-feature** : Nouvelles fonctionnalit√©s
- **fix/nom-fix** : Corrections de bugs
- **hotfix/nom-hotfix** : Corrections urgentes

### Commits
Convention **Conventional Commits** :
```bash
# Format
type(scope): description

# Exemples
feat(auth): add user authentication
fix(api): resolve data fetching error
docs(readme): update installation guide
style(button): improve hover effects
refactor(utils): optimize data processing
test(user): add login flow tests
```

### Pull Requests
1. **Cr√©er une branche** depuis `develop`
2. **D√©velopper** la fonctionnalit√©
3. **Tester** localement (lint + tests)
4. **Cr√©er la PR** vers `develop`
5. **Code Review** obligatoire
6. **Merge** apr√®s validation

## üèóÔ∏è Architecture

### Patterns Recommand√©s
- **Composants fonctionnels** (React)
- **Composition API** (Vue.js)
- **Custom Hooks** pour la logique r√©utilisable
- **Services** pour les appels API
- **State management** centralis√© si n√©cessaire

### Gestion d'√âtat
```javascript
// √âtat local (useState, ref)
const [state, setState] = useState(initialValue);

// √âtat global (Context, Redux, Zustand, Pinia)
const { user, updateUser } = useUserStore();

// √âtat serveur (React Query, SWR)
const { data, error, isLoading } = useQuery('users', fetchUsers);
```

### API et Services
```javascript
// Structure service
export const userService = {
  async getAll() {
    const response = await fetch('/api/users');
    return response.json();
  },
  
  async getById(id) {
    const response = await fetch(`/api/users/${id}`);
    return response.json();
  }
};
```

## üîí S√©curit√©

### Bonnes Pratiques
- **Validation** des inputs utilisateur
- **Sanitization** des donn√©es
- **HTTPS** en production
- **Variables d'environnement** pour les secrets
- **CSP** (Content Security Policy)

### Variables d'Environnement
```bash
# .env.local
NEXT_PUBLIC_API_URL=http://localhost:3001
DATABASE_URL=postgresql://user:pass@localhost/db
JWT_SECRET=your-secret-key
```

## üì¶ Build et D√©ploiement

### Build de Production
```bash
# Build optimis√©
npm run build

# V√©rification du build
npm run start

# Analyse du bundle (si disponible)
npm run analyze
```

### Optimisations
- **Code splitting** automatique
- **Tree shaking** activ√©
- **Compression** des assets
- **Lazy loading** des composants
- **Service Worker** (PWA)

## üêõ Debugging

### Outils de D√©veloppement
- **React DevTools** / **Vue DevTools**
- **Redux DevTools** (si applicable)
- **Network tab** pour les API
- **Console** pour les logs
- **Sources** pour le debugging

### Logs et Monitoring
```javascript
// Logs structur√©s
console.group('User Action');
console.log('Action:', action);
console.log('Payload:', payload);
console.groupEnd();

// Monitoring d'erreurs
try {
  // Code √† risque
} catch (error) {
  console.error('Error:', error);
  // Envoyer √† service de monitoring
}
```

## üìö Ressources

### Documentation
- **README.md** : Vue d'ensemble du projet
- **CHANGELOG.md** : Historique des versions
- **API.md** : Documentation API (si applicable)
- **DEPLOYMENT.md** : Guide de d√©ploiement

### Liens Utiles
- [Documentation Framework](#)
- [Guide des bonnes pratiques](#)
- [Standards de l'√©quipe](#)

---

üü® **Happy JavaScript Development!** üöÄ